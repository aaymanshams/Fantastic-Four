#include <iostream>
#include <cstring>
#include <bits/stdc++.h>
using namespace std;

class Node {
    public:
    string description;
    time_t deadline;
    int priority;
    Node* next;
    
    
    Node(string x, int y, time_t z){
        this -> description = x;
        this -> priority = y;
        this -> deadline = z;
        this -> next = NULL;
    }
};

class Task {
    public:
        Node* head;

        void AddTask(){
            
            string desp;
            int year, month, day, hour, minute;
            char colon;
            cout << "Enter task: "; cin >> desp;
            cout << "Enter date (DD/MM/YYYY): "; 
            cin >> day >> colon >> month  >> colon >> year;
            cout << "Enter time (HH:MM): "; cin >> hour >> colon >> minute;
            
            struct std::tm timeinfo = {};
            timeinfo.tm_year = year - 1900; // Years since 1900
            timeinfo.tm_mon = month - 1;    // Months since January
            timeinfo.tm_mday = day;         // Day of the month
            timeinfo.tm_hour = hour;        // Hours since midnight
            timeinfo.tm_min = minute;       // Minutes after the hour
            //atimeinfo.tm_sec = second;       // Seconds after the minute
            
            // Convert tm to time_t
            time_t dl = mktime(&timeinfo);

            time_t currentTime = time(0);
            currentTime += 5*3600 + 30*60;

            if(currentTime >= dl){
                cout << "Invalid time. Please try again." << endl;
                this->AddTask();
                return;
            }

            // Convert time_t to time_point
            //system_clock::time_point userTimePoint = system_clock::from_time_t(dl);
            
            cout << "Enter the priority of your task(1-3): ";
            int p; cin >> p;
            if(p > 3 || p < 1){
                while(p > 3 || p < 1){
                    cout << "Choose the value of priority between 1-3: ";
                    cin >> p;
                }
            }

            Node* NewNode = new Node(desp, p, dl);

            if(head == NULL || p <= head -> priority ){  // && dl <= head -> deadline

                NewNode -> next = head;
                head = NewNode;

            }else {

                Node* current = head;
                // Traverse the list to find the position to insert the new node
                while (current -> next != NULL && current -> next -> priority > p){
                    current = current -> next;
                }
                // while(current -> next -> deadline < dl){
                //     current = current -> next;          //for sort by deadline...
                // }

                NewNode -> next = current -> next;
                current -> next = NewNode;

            }   
            
            cout << "Your reminder '" << desp << "' has been scheduled for " << ctime(&dl);

        }
        
};
 void DisplayTasks() {
            
            if(head == NULL){
                cout << "No scheduled tasks :" << endl;
                return;
            }
            Node* current = head;
            while (current) {
                time_t a = current -> deadline;
                cout << "Task: " << current-> description << ", Priority: " << current -> priority << ", Time Data: " << ctime(&a) << endl;
                cout << (current -> status? "Status: completed" : "Status: pending") << endl;
                current = current->next;
            }
        }
  void CheckReminders(){

            time_t currentTime = time(NULL);
            currentTime += 5*3600 + 30*60;
            int count = 0;

            Node* temp = head;
            cout << "Tasks that are due in 1 hour: " << endl;
            while(temp != NULL){
                if(temp -> status == true){
                    temp = temp -> next;
                    continue;
                }
                if( temp -> deadline <= currentTime + 3600 ){
                    time_t a = temp -> deadline;
                    cout << "Task: " << temp-> description << ", Priority: " << temp -> priority << ", Time Data: " << ctime(&a) << endl;
                    count++;
                }
                temp = temp -> next;
            }
            if(count == 0){
                cout << "No tasks are due in an hour..." << endl;
            }else{
                cout << "You have " << count << " tasks pending which are due in 1 hour!" << endl;
            }

        }



int main() {
    
    cout << "Hello world!" << endl;
    return 0;
}
